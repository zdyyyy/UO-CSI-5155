# -*- coding: utf-8 -*-
"""5155-hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ialhnCDRAmtEz0LieRGdxEjXynR8hxk
"""

from google.colab import drive
drive.mount('/content/drive')

import sklearn
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn import preprocessing    #for normalizing
from sklearn.model_selection import train_test_split   
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import plot_roc_curve
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import precision_recall_fscore_support
import matplotlib.pyplot as plt

df = pd.read_csv("/content/drive/My Drive/5155-hw1/drug_consumption.data")

columns = ["ID","Age","Gender","Education","Country","Ethnicity","Nscore","Escore",
           "Oscore","Ascore","Cscore","Impulsive","SS","Alcohol","Amphet","Amyl",
           "Benzos","Caff","Cannabis","Choc","Coke","Crack","Ecstasy","Heroin",
           "Ketamine","Legalh","LSD","Meth","Mushrooms","Nicotine","Semer","VSA"]

df.to_excel("/content/drive/My Drive/5155-hw1/drug_consumption.xlsx")

df.columns = columns

df.drop("ID",axis = 1,inplace = True)

#check with the data description to make sure the data is correct
df.describe()

temp = df.loc[:,"Alcohol":"VSA"]

for c in temp:
  # print(c)
  temp[c].replace(['CL0','CL1'],'Non-user',inplace = True)
  temp[c].replace(['CL2','CL3','CL4','CL5','CL6'],'User',inplace = True)

temp.describe()

temp.to_csv("/content/drive/My Drive/5155-hw1/temp.csv")

df.loc[:,"Alcohol":"VSA"] = temp.loc[:,"Alcohol":"VSA"]

df

X = df.loc[:,"Age":"SS"]

X

plt.figure(figsize = (25,25))
corr_values1 = X.corr() 
sns.heatmap(corr_values1, annot=True,vmax=1, square=True, cmap="Blues",fmt='.2f')

#Impulse and SS are highly correlated
X.drop('SS',axis = 1,inplace = True)

X

#select 6 labels
labels = []
for col in df.loc[:,'Alcohol':'Cannabis']:
  labels.append(col)

labels

df[labels].describe()

import warnings
warnings.filterwarnings("ignore")

#model construction and evaluation
for i in range(len(labels)):
  y = df[labels[i]]
  X = preprocessing.scale(X)
  x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.3)
  label = ['User','Non-user']

  #svm
  svm_clf = SVC()
  svm_clf.fit(x_train, y_train)
  y_pred_svm = svm_clf.predict(x_test)
  p_svm, r_svm, f_svm, support_svm=precision_recall_fscore_support(y_true=y_test, y_pred=y_pred_svm, labels=label)
  cm_svm = confusion_matrix(y_test, y_pred_svm, labels = label)

  print("svm confusion_matrix:",cm_svm)
  cmd_svm = ConfusionMatrixDisplay(cm_svm, display_labels=label)
  cmd_svm.plot()
  
  print("svm accuracy:",svm_clf.score(x_test, y_test))
  print("svm Presion:",p_svm)
  print("svm Recall:",r_svm)

  #rf
  rf_clf = RandomForestClassifier(max_depth=2, random_state=0)
  rf_clf.fit(x_train, y_train)
  y_pred_rf = rf_clf.predict(x_test)
  p_rf, r_rf, f_rf, support_rf=precision_recall_fscore_support(y_true=y_test, y_pred=y_pred_rf, labels=label)
  cm_rf = confusion_matrix(y_test, y_pred_rf, labels = label)

  print("rf confusion_matrix:",cm_rf)
  cmd_rf = ConfusionMatrixDisplay(cm_rf, display_labels=label)
  cmd_rf.plot()
  
  print("rf accuracy:",rf_clf.score(x_test, y_test))
  print("rf Presion:",p_rf)
  print("rf Recall:",r_rf)

  #dt
  dt_clf = DecisionTreeClassifier(random_state=0)
  dt_clf.fit(x_train, y_train)
  y_pred_dt = dt_clf.predict(x_test)
  p_dt, r_dt, f_dt, support_dt=precision_recall_fscore_support(y_true=y_test, y_pred=y_pred_dt, labels=label)
  cm_dt = confusion_matrix(y_test, y_pred_dt, labels = label)

  print("dt confusion_matrix:",cm_dt)
  cmd_dt = ConfusionMatrixDisplay(cm_dt, display_labels=label)
  cmd_dt.plot()
  
  print("dt accuracy:",dt_clf.score(x_test, y_test))
  print("dt Presion:",p_dt)
  print("dt Recall:",r_dt)

  #knn
  knn_clf = KNeighborsClassifier(n_neighbors=3)
  knn_clf.fit(x_train, y_train)
  y_pred_knn = knn_clf.predict(x_test)
  p_knn, r_knn, f_knn, support_knn=precision_recall_fscore_support(y_true=y_test, y_pred=y_pred_knn, labels=label)
  cm_knn = confusion_matrix(y_test, y_pred_knn, labels = label)

  print("knn confusion_matrix:",cm_knn)
  cmd_knn = ConfusionMatrixDisplay(cm_knn, display_labels=label)
  cmd_knn.plot()
  
  print("knn accuracy:",knn_clf.score(x_test, y_test))
  print("knn Presion:",p_knn)
  print("knn Recall:",r_knn)

  #create plots
  fig,ax = plt.subplots(figsize=(12,10))
  knn_roc = plot_roc_curve(estimator = knn_clf, X=x_test, 
                        y=y_test, ax=ax, linewidth=1)
  dt_roc = plot_roc_curve(estimator = dt_clf, X=x_test,
                        y=y_test, ax=ax, linewidth=1)
  rf_roc = plot_roc_curve(estimator = rf_clf, X=x_test,y=y_test, ax=ax, linewidth=1)
  SVM_roc = plot_roc_curve(estimator = svm_clf,X = x_test,y = y_test,ax = ax, linewidth = 1)
  
  #alter the size of characters
  ax.legend(fontsize=12)

  #show the ROC curve
  plt.show()

